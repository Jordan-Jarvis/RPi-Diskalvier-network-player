# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import mmp_pb2 as mmp__pb2


class MusicPlayerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RetrieveAlbumList = channel.unary_unary(
        '/grpc.MusicPlayer/RetrieveAlbumList',
        request_serializer=mmp__pb2.MediaData.SerializeToString,
        response_deserializer=mmp__pb2.AlbumList.FromString,
        )
    self.RetrieveSongList = channel.unary_unary(
        '/grpc.MusicPlayer/RetrieveSongList',
        request_serializer=mmp__pb2.MediaData.SerializeToString,
        response_deserializer=mmp__pb2.SongList.FromString,
        )
    self.Play = channel.unary_unary(
        '/grpc.MusicPlayer/Play',
        request_serializer=mmp__pb2.MediaControl.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.ChangeVolume = channel.unary_unary(
        '/grpc.MusicPlayer/ChangeVolume',
        request_serializer=mmp__pb2.VolumeControl.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.ChangePosition = channel.unary_unary(
        '/grpc.MusicPlayer/ChangePosition',
        request_serializer=mmp__pb2.PositionControl.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.Previous = channel.unary_unary(
        '/grpc.MusicPlayer/Previous',
        request_serializer=mmp__pb2.PlaybackControl.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.Next = channel.unary_unary(
        '/grpc.MusicPlayer/Next',
        request_serializer=mmp__pb2.PlaybackControl.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.AddNext = channel.unary_unary(
        '/grpc.MusicPlayer/AddNext',
        request_serializer=mmp__pb2.MediaData.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.AddToQueue = channel.unary_unary(
        '/grpc.MusicPlayer/AddToQueue',
        request_serializer=mmp__pb2.MediaData.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.RetrieveMMPStatus = channel.unary_unary(
        '/grpc.MusicPlayer/RetrieveMMPStatus',
        request_serializer=mmp__pb2.MMPStatusRequest.SerializeToString,
        response_deserializer=mmp__pb2.MMPStatus.FromString,
        )
    self.RegisterMMPNotify = channel.unary_stream(
        '/grpc.MusicPlayer/RegisterMMPNotify',
        request_serializer=mmp__pb2.MMPStatusRequest.SerializeToString,
        response_deserializer=mmp__pb2.MMPStatus.FromString,
        )


class MusicPlayerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RetrieveAlbumList(self, request, context):
    """
    Media Player rpc calls

    Retrieve a list of data, (eg. albums, songs)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RetrieveSongList(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Play(self, request, context):
    """Playback
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ChangeVolume(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ChangePosition(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Previous(self, request, context):
    """Queue manipulation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Next(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddNext(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddToQueue(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RetrieveMMPStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RegisterMMPNotify(self, request, context):
    """special register RPC call, clients can make this request (register) and keep receiving updates (when available)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MusicPlayerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RetrieveAlbumList': grpc.unary_unary_rpc_method_handler(
          servicer.RetrieveAlbumList,
          request_deserializer=mmp__pb2.MediaData.FromString,
          response_serializer=mmp__pb2.AlbumList.SerializeToString,
      ),
      'RetrieveSongList': grpc.unary_unary_rpc_method_handler(
          servicer.RetrieveSongList,
          request_deserializer=mmp__pb2.MediaData.FromString,
          response_serializer=mmp__pb2.SongList.SerializeToString,
      ),
      'Play': grpc.unary_unary_rpc_method_handler(
          servicer.Play,
          request_deserializer=mmp__pb2.MediaControl.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'ChangeVolume': grpc.unary_unary_rpc_method_handler(
          servicer.ChangeVolume,
          request_deserializer=mmp__pb2.VolumeControl.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'ChangePosition': grpc.unary_unary_rpc_method_handler(
          servicer.ChangePosition,
          request_deserializer=mmp__pb2.PositionControl.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'Previous': grpc.unary_unary_rpc_method_handler(
          servicer.Previous,
          request_deserializer=mmp__pb2.PlaybackControl.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'Next': grpc.unary_unary_rpc_method_handler(
          servicer.Next,
          request_deserializer=mmp__pb2.PlaybackControl.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'AddNext': grpc.unary_unary_rpc_method_handler(
          servicer.AddNext,
          request_deserializer=mmp__pb2.MediaData.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'AddToQueue': grpc.unary_unary_rpc_method_handler(
          servicer.AddToQueue,
          request_deserializer=mmp__pb2.MediaData.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'RetrieveMMPStatus': grpc.unary_unary_rpc_method_handler(
          servicer.RetrieveMMPStatus,
          request_deserializer=mmp__pb2.MMPStatusRequest.FromString,
          response_serializer=mmp__pb2.MMPStatus.SerializeToString,
      ),
      'RegisterMMPNotify': grpc.unary_stream_rpc_method_handler(
          servicer.RegisterMMPNotify,
          request_deserializer=mmp__pb2.MMPStatusRequest.FromString,
          response_serializer=mmp__pb2.MMPStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc.MusicPlayer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DataManagerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.DeleteAlbum = channel.unary_unary(
        '/grpc.DataManager/DeleteAlbum',
        request_serializer=mmp__pb2.MediaData.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.DeleteSong = channel.unary_unary(
        '/grpc.DataManager/DeleteSong',
        request_serializer=mmp__pb2.MediaData.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.RenameAlbum = channel.unary_unary(
        '/grpc.DataManager/RenameAlbum',
        request_serializer=mmp__pb2.RenameData.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.RenameSong = channel.unary_unary(
        '/grpc.DataManager/RenameSong',
        request_serializer=mmp__pb2.RenameData.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )
    self.MoveSong = channel.unary_unary(
        '/grpc.DataManager/MoveSong',
        request_serializer=mmp__pb2.MoveData.SerializeToString,
        response_deserializer=mmp__pb2.MMPResponse.FromString,
        )


class DataManagerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def DeleteAlbum(self, request, context):
    """
    Data Management RPC calls

    TODO: DeleteAlbum, DeleteSong and RenameAlbum, RenameSong can merged to single call
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteSong(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RenameAlbum(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RenameSong(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MoveSong(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DataManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'DeleteAlbum': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteAlbum,
          request_deserializer=mmp__pb2.MediaData.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'DeleteSong': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteSong,
          request_deserializer=mmp__pb2.MediaData.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'RenameAlbum': grpc.unary_unary_rpc_method_handler(
          servicer.RenameAlbum,
          request_deserializer=mmp__pb2.RenameData.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'RenameSong': grpc.unary_unary_rpc_method_handler(
          servicer.RenameSong,
          request_deserializer=mmp__pb2.RenameData.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
      'MoveSong': grpc.unary_unary_rpc_method_handler(
          servicer.MoveSong,
          request_deserializer=mmp__pb2.MoveData.FromString,
          response_serializer=mmp__pb2.MMPResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc.DataManager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MediaDownloaderStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.DownloadMedia = channel.unary_unary(
        '/grpc.MediaDownloader/DownloadMedia',
        request_serializer=mmp__pb2.MediaDownload.SerializeToString,
        response_deserializer=mmp__pb2.DownloadStatus.FromString,
        )
    self.RetrieveMDStatus = channel.unary_unary(
        '/grpc.MediaDownloader/RetrieveMDStatus',
        request_serializer=mmp__pb2.MDStatusRequest.SerializeToString,
        response_deserializer=mmp__pb2.MDStatus.FromString,
        )
    self.NotifyMDStatus = channel.unary_stream(
        '/grpc.MediaDownloader/NotifyMDStatus',
        request_serializer=mmp__pb2.MDStatusRequest.SerializeToString,
        response_deserializer=mmp__pb2.MDStatus.FromString,
        )


class MediaDownloaderServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def DownloadMedia(self, request, context):
    """
    Media Downloader RPC Calls

    This call downloads the specified media
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RetrieveMDStatus(self, request, context):
    """Get the status of the downloader
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NotifyMDStatus(self, request, context):
    """special register RPC call, clients can make this request (register) and keep receiving updates (when available)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MediaDownloaderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'DownloadMedia': grpc.unary_unary_rpc_method_handler(
          servicer.DownloadMedia,
          request_deserializer=mmp__pb2.MediaDownload.FromString,
          response_serializer=mmp__pb2.DownloadStatus.SerializeToString,
      ),
      'RetrieveMDStatus': grpc.unary_unary_rpc_method_handler(
          servicer.RetrieveMDStatus,
          request_deserializer=mmp__pb2.MDStatusRequest.FromString,
          response_serializer=mmp__pb2.MDStatus.SerializeToString,
      ),
      'NotifyMDStatus': grpc.unary_stream_rpc_method_handler(
          servicer.NotifyMDStatus,
          request_deserializer=mmp__pb2.MDStatusRequest.FromString,
          response_serializer=mmp__pb2.MDStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc.MediaDownloader', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
